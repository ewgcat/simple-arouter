apply plugin: 'com.android.application'

// 定义变量，同学们注意：可以定义变量，也可以不定义变量
def app_android = this.getRootProject().ext.app_android;
def app_dependencies = this.rootProject.ext.app_dependencies;

android {

    compileSdkVersion app_android.compileSdkVersion
    buildToolsVersion app_android.buildToolsVersion
    defaultConfig {
        applicationId app_android.applicationId
        minSdkVersion app_android.minSdkVersion
        targetSdkVersion app_android.targetSdkVersion
        versionCode app_android.versionCode
        versionName app_android.versionName

        // 这个方法接收三个非空的参数，第一个：确定值的类型，第二个：指定key的名字，第三个：传值（必须是String）
        // 为什么需要定义这个？因为src代码中有可能需要用到跨模块交互，如果是组件化模块显然不行
        // 切记：不能在android根节点，只能在defaultConfig或buildTypes节点下
        buildConfigField("boolean", "isRelease", String.valueOf(isRelease))

        // 在gradle文件中配置选项参数值（用于APT传参接收）
        // 同学们注意：切记：必须写在defaultConfig节点下
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName(), packageNameForAPT: packageNameForAPT]
            }
        }
    }
    signingConfigs {
        releaseKey {
            storeFile new File("${project.projectDir}/key/signkey.jks")
            storePassword 'lsh123456'
            keyAlias 'jack'
            keyPassword 'lsh123456'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.releaseKey
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    ndkVersion '21.1.6352462'
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dependenciesInfo {
        includeInApk true
        includeInBundle true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // 循环引入第三方库
    app_dependencies.each {k, v ->
        // if (k != "aa" && v != "cc") {}
        implementation v
    }



    api project(":arouter_api")
    annotationProcessor project(":arouter_compiler")
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

//    api 'com.github.ewgcat:simple-arouter:1.0.5'
//    annotationProcessor  'com.github.ewgcat:simple-arouter:1.0.5'


}
